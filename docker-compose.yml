# Saafe Fire Detection System - Docker Compose Configuration
# Production-ready multi-service deployment with monitoring and caching
# Built with enterprise DevOps best practices

version: '3.8'

services:
  # Main Saafe Application
  saafe-app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILDTIME: ${BUILD_TIME:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        VERSION: ${VERSION:-1.0.0}
        REVISION: ${GIT_COMMIT:-$(git rev-parse HEAD)}
    image: saafe:${VERSION:-latest}
    container_name: saafe-app
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - ENV=${ENV:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - REDIS_URL=redis://redis:6379/0
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus_multiproc_dir
    
    # Port mapping
    ports:
      - "${SAAFE_PORT:-8501}:8501"
    
    # Volume mounts
    volumes:
      - ./config:/home/saafe/app/config:ro
      - ./logs:/home/saafe/app/logs
      - ./models:/home/saafe/app/models:ro
      - saafe-temp:/home/saafe/app/temp
      - prometheus-multiproc:/tmp/prometheus_multiproc_dir
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
      prometheus:
        condition: service_started
    
    # Networks
    networks:
      - saafe-network
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: saafe-redis
    restart: unless-stopped
    
    # Configuration
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
    
    # Volume for persistence
    volumes:
      - redis-data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    
    # Networks
    networks:
      - saafe-network
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: saafe-prometheus
    restart: unless-stopped
    
    # Configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    
    # Port mapping
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    # Volume mounts
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus-data:/prometheus
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    # Health check
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Networks
    networks:
      - saafe-network
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: saafe-grafana
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    
    # Port mapping
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    # Volume mounts
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.2'
          memory: 256M
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    # Dependencies
    depends_on:
      prometheus:
        condition: service_healthy
    
    # Networks
    networks:
      - saafe-network
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Node Exporter for System Metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: saafe-node-exporter
    restart: unless-stopped
    
    # Configuration
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    
    # Volume mounts for system metrics
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    
    # Port mapping
    ports:
      - "${NODE_EXPORTER_PORT:-9100}:9100"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Networks
    networks:
      - saafe-network
    
    # Security
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Alert Manager (Optional)
  alertmanager:
    image: prom/alertmanager:latest
    container_name: saafe-alertmanager
    restart: unless-stopped
    profiles: ["monitoring"]
    
    # Configuration
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    
    # Port mapping
    ports:
      - "${ALERTMANAGER_PORT:-9093}:9093"
    
    # Volume mounts
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data:/alertmanager
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M
    
    # Networks
    networks:
      - saafe-network
    
    # Security
    security_opt:
      - no-new-privileges:true
    
    # Logging
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

# Networks
networks:
  saafe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    driver_opts:
      com.docker.network.bridge.name: saafe-br0

# Volumes
volumes:
  # Application data
  saafe-temp:
    driver: local
  
  # Redis data persistence
  redis-data:
    driver: local
  
  # Prometheus data
  prometheus-data:
    driver: local
  
  # Grafana data
  grafana-data:
    driver: local
  
  # AlertManager data
  alertmanager-data:
    driver: local
  
  # Prometheus multiprocess directory
  prometheus-multiproc:
    driver: local

# Secrets (for production use)
secrets:
  grafana_password:
    external: true
  redis_password:
    external: true
  saafe_config:
    external: true